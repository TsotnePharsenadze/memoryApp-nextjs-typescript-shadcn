datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             String          @id @default(cuid())
    name           String?
    surname        String?
    username       String?
    email          String          @unique
    emailVerified  DateTime?
    hashedPassword String?
    image          String?
    accounts       Account[]
    sessions       Session[]
    Authenticator  Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    GameStatsNumber GameStatsNumber[]
    GameStatsWord   GameStatsWord[]
    GameStatsCard   GameStatsCard[]
    GameStatsImage  GameStatsImage[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model GameStatsNumber {
    id                String    @id @default(cuid())
    userId            String
    correctAnswers    Int       @default(0)
    incorrectAnswers  Int       @default(0)
    gameStatus        Int       @default(0)
    numbersUserPicked Int[]     @default([])
    numbersToDisplay  Int[]     @default([])
    currentIndex      Int       @default(0)
    startTime         DateTime?
    endTime           DateTime?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    isCustom          Boolean

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameStatsWord {
    id               String    @id @default(cuid())
    userId           String
    correctAnswers   Int       @default(0)
    incorrectAnswers Int       @default(0)
    gameStatus       Int       @default(0)
    wordsUserPicked  String[]  @default([])
    wordsToDisplay   String[]  @default([])
    currentIndex     Int       @default(0)
    startTime        DateTime?
    endTime          DateTime?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    isCustom         Boolean

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameStatsImage {
    id               String    @id @default(cuid())
    userId           String
    correctAnswers   Int       @default(0)
    incorrectAnswers Int       @default(0)
    gameStatus       Int       @default(0)
    imagesUserPicked String[]  @default([])
    imagesToDisplay  String[]  @default([])
    currentIndex     Int       @default(0)
    startTime        DateTime?
    endTime          DateTime?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    isCustom         Boolean

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameStatsCard {
    id               String    @id @default(cuid())
    userId           String
    correctAnswers   Int       @default(0)
    incorrectAnswers Int       @default(0)
    gameStatus       Int       @default(0)
    CardsUserPicked  String[]  @default([])
    CardsToDisplay   String[]  @default([])
    currentIndex     Int       @default(0)
    startTime        DateTime?
    endTime          DateTime?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    isCustom         Boolean

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
